services:
  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres:latest
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Give it some time to start initially
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    volumes:
      - order_data:/var/lib/postgresql/data
    ports:
      - "5431:5432"
    restart: unless-stopped

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres:latest
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
#      POSTGRES_HOST_AUTH_METHOD: md5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s # Give it some time to start initially
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    volumes:
      - inventory_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: unless-stopped
    ports:
      - "27017:27017"
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db

  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    volumes:
#      - postgres_data:/var/lib/postgresql/data
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.6
    container_name: keycloak
    command: start-dev --import-realm

    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # Database
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      # Hostname setup
      KC_HOSTNAME: keycloak        # ðŸ‘ˆ main hostname for tokens
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_HTTP_PORT: 8080
    ports:
      - "8080:8080" #8080 default port for keycloak
      - "8443:8443"
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      keycloak-db:
        condition: service_started

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "9080:8080"  # HOST:CONTAINER - Maps the container's web-GUI port (8080) to your host's port 9080
      - "2181:2181"  # Zookeeper client port mapping (standard)
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9411/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 50s

  ## Eureka Server
  discovery-server:
    image: vinaythakoor004/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
#
#    healthcheck:
#      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8761/actuator/health"]
#      interval: 10s
#      timeout: 3s
#      retries: 5
#      start_period: 20s
#    depends_on:
#      zipkin:
#        condition: service_healthy

  api-gateway:
    image: vinaythakoor004/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8181:8083"
    expose:
      - "8181"
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
      - SERVER_PORT=8083
    depends_on:
      zipkin:
        condition: service_started
      discovery-server:
        condition: service_started
      keycloak:
        condition: service_started

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: vinaythakoor004/product-service:latest
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8085
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    depends_on:
      mongo:
        condition: service_started
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: vinaythakoor004/order-service:latest
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8082
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect # <-- Good practice
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    depends_on:
      postgres-order:
        condition: service_healthy # Requires 'postgres-order' to have a healthcheck defined
      broker:
        condition: service_started # Use this for services without a healthcheck
      zipkin:
        condition: service_started
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: vinaythakoor004/inventory-service:latest
    ports:
      - "8081:8081"
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8081
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
    depends_on:
      postgres-inventory:
        condition: service_healthy
      zipkin:
        condition: service_started
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: vinaythakoor004/notification-service:latest
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_PORT=8084
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:password@discovery-server:8761/eureka
    deploy:
      resources:
        limits:
          cpus: '0.75'   # Limit to 75% of one core
          memory: 768M
    depends_on:
      zipkin:
        condition: service_started
      broker:
        condition: service_started
      discovery-server:
        condition: service_started
      api-gateway:
        condition: service_started

volumes:
  inventory_data:
  order_data: